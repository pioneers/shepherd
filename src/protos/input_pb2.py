# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: input.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0binput.proto\"R\n\x05Input\x12\x11\n\tconnected\x18\x01 \x01(\x08\x12\x0f\n\x07\x62uttons\x18\x02 \x01(\x06\x12\x0c\n\x04\x61xes\x18\x03 \x03(\x02\x12\x17\n\x06source\x18\x04 \x01(\x0e\x32\x07.Source\"$\n\nUserInputs\x12\x16\n\x06inputs\x18\x01 \x03(\x0b\x32\x06.Input*#\n\x06Source\x12\x0b\n\x07GAMEPAD\x10\x00\x12\x0c\n\x08KEYBOARD\x10\x01\x42\x02H\x03\x62\x06proto3')

_SOURCE = DESCRIPTOR.enum_types_by_name['Source']
Source = enum_type_wrapper.EnumTypeWrapper(_SOURCE)
GAMEPAD = 0
KEYBOARD = 1


_INPUT = DESCRIPTOR.message_types_by_name['Input']
_USERINPUTS = DESCRIPTOR.message_types_by_name['UserInputs']
Input = _reflection.GeneratedProtocolMessageType('Input', (_message.Message,), {
  'DESCRIPTOR' : _INPUT,
  '__module__' : 'input_pb2'
  # @@protoc_insertion_point(class_scope:Input)
  })
_sym_db.RegisterMessage(Input)

UserInputs = _reflection.GeneratedProtocolMessageType('UserInputs', (_message.Message,), {
  'DESCRIPTOR' : _USERINPUTS,
  '__module__' : 'input_pb2'
  # @@protoc_insertion_point(class_scope:UserInputs)
  })
_sym_db.RegisterMessage(UserInputs)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'H\003'
  _SOURCE._serialized_start=137
  _SOURCE._serialized_end=172
  _INPUT._serialized_start=15
  _INPUT._serialized_end=97
  _USERINPUTS._serialized_start=99
  _USERINPUTS._serialized_end=135
# @@protoc_insertion_point(module_scope)
